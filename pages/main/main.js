"use strict";
Page({
    onShareAppMessage: function () {
        return {
            title: "听个戏吧",
            path: "pages/main"
        };
    },
    data: {
        currentOperaIndex: 0,
        operas: [],
        recorderManager: wx.getRecorderManager(),
        isRecording: false,
        recordStartTime: new Date()
    },
    onLoad: function () {
        this.initOperas();
        this.initRecorders();
    },
    initOperas: function () {
        var _this = this;
        wx.request({
            url: 'http://localhost:3000/operas',
            data: {
                pageIndex: 0,
                pageSize: 5
            },
            success: function (res) {
                var operaList = res.data;
                var operas = operaList.map(function (dto, i) { return ({
                    title: dto.title,
                    link: dto.link,
                    context: wx.createVideoContext("opera-" + i)
                }); });
                _this.setData({ operas: operas }, function () {
                    _this.data.operas[0].context.play();
                });
            }
        });
    },
    initRecorders: function () {
        var recorderManager = this.data.recorderManager;
        recorderManager.onStop(function (res) {
            console.log(res);
            wx.uploadFile({
                url: "https://xxxx",
                filePath: res.tempFilePath,
                name: "file",
                header: {
                    "content-type": "multipart/form-data"
                },
                success: function (res) {
                    console.log(res);
                },
                fail: function () {
                    console.log("语音识别失败");
                }
            });
        });
    },
    switchToNextVideo: function (nextIndex) {
        var _this = this;
        var prevIndex = this.data.currentOperaIndex;
        this.data.operas[prevIndex].context.seek(0);
        this.data.operas[prevIndex].context.pause();
        this.setData({
            currentOperaIndex: nextIndex
        }, function () {
            _this.data.operas[nextIndex].context.play();
        });
    },
    onSwiperChange: function (e) {
        this.switchToNextVideo(e.detail.current);
    },
    onVideoEnded: function () {
        var _a = this.data, currentOperaIndex = _a.currentOperaIndex, operas = _a.operas;
        if (currentOperaIndex === operas.length - 1) {
            return;
        }
        this.switchToNextVideo(this.data.currentOperaIndex + 1);
    },
    startRecord: function () {
        var _a = this.data, recorderManager = _a.recorderManager, isRecording = _a.isRecording;
        if (isRecording) {
            return;
        }
        console.log("record start");
        this.setData({ isRecording: true, recordStartTime: new Date() });
        var options = {
            duration: 10000,
            sampleRate: 16000,
            numberOfChannels: 1,
            encodeBitRate: 64000,
            format: 'PCM',
            frameSize: 50
        };
        recorderManager.start(options);
    },
    stopRecord: function () {
        var _a = this.data, recorderManager = _a.recorderManager, isRecording = _a.isRecording, recordStartTime = _a.recordStartTime;
        if (!isRecording) {
            return;
        }
        var duration = new Date().getTime() - recordStartTime.getTime();
        if (duration < 1000) {
            console.log("record too short ");
            return;
        }
        console.log("record end ", duration);
        this.setData({ isRecording: false });
        recorderManager.stop();
    }
});
//# sourceMappingURL=data:application/json;base64,